

# This file was *autogenerated* from the file hirzebruch.sage
from sage.all_cmdline import *   # import sage library

_sage_const_10 = Integer(10); _sage_const_8 = Integer(8); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)
import json
from itertools import combinations_with_replacement


MAX_DIM = _sage_const_10 
MAX_DEGREE = _sage_const_10 
MAX_NUM_HYPERSURFACES = _sage_const_8 

# Hodge polynomial computation
def hodge(d, n, front_part, back_part):
    n -= len(d)  # Adjust dimension for the intersections
    R = PowerSeriesRing(ZZ, default_prec=n + _sage_const_2 , names=('x', 'y',)); (x, y,) = R._first_ngens(2)
    H = (front_part * 
         (prod(((_sage_const_1  + x)**di - (_sage_const_1  + y)**di) / (x * (_sage_const_1  + y)**di - y * (_sage_const_1  + x)**di) for di in d) - _sage_const_1 ) +
         back_part)
    # Compute only the first (n-k)+1 terms because of Hodge symmetry
    H_coefficients = H.coefficients()
    left_half = [H_coefficients.get(x**i * y**(n - i), _sage_const_0 ) for i in range((n // _sage_const_2 ) + _sage_const_1 )]
    return left_half

# Initialize dictionary to store results
results = {}

# Main loop
for n in range(_sage_const_1 , MAX_DIM + _sage_const_1 ):  # n from 1 to MAX_DIM
    # Precompute series ring and static terms for this `n`
    R = PowerSeriesRing(ZZ, default_prec=n + _sage_const_2 , names=('x', 'y',)); (x, y,) = R._first_ngens(2)
    front_part = _sage_const_1  / ((_sage_const_1  + x) * (_sage_const_1  + y))
    back_part = _sage_const_1  / (_sage_const_1  - x * y)

    for num_intersections in range(_sage_const_1 , min(MAX_NUM_HYPERSURFACES, n-_sage_const_1 ) + _sage_const_1 ):
        # Use combinations_with_replacement to ensure sorted degrees
        for degrees in combinations_with_replacement(range(_sage_const_1 , MAX_DEGREE + _sage_const_1 ), num_intersections):
            degrees = sorted(degrees,reverse=True)
            key = "-".join(map(str, degrees)) + f",{n}"
            results[key] = hodge(degrees, n, front_part, back_part)

# Convert all data to native Python types before saving
results = {key: [int(value) for value in values] for key, values in results.items()}

# Export the results to a JSON file
with open("hodge_numbers.json", "w") as f:
    json.dump(results, f)

